service: storage-service

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:REGION}
  environment:
    S3_BUCKET: ${env:S3_BUCKET}
    METADATA_TABLE: ${env:METADATA_TABLE}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/index/FetchFileIndex
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/index/UserUsageIndex

functions:

  generatePresignedUrl:
    handler: service/generatePresignedUrl.handler
    events:
      - http:
          path: files/presigned-url
          method: post
          cors: true

  fetchFileMetadata:
    handler: service/fetchFileMetadata.handler
    events:
      - http:
          path: files/metadata
          method: get
          cors: true

  deleteFile:
    handler: service/deleteFile.handler
    events:
      - http:
          path: files/{storedFileName}
          method: delete
          cors: true

  storeFileMetadata:
    handler: service/storeFileMetadata.handler
    events:
      - http:
          path: files/store-metadata
          method: post
          cors: true

  getUserUsage:
    handler: service/getUserUsage.handler
    events:
      - http:
          path: files/get-user-usage
          method: get
          cors: true

resources:
  Resources:
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:METADATA_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: targetId
            AttributeType: S
          - AttributeName: targetType
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FetchFileIndex
            KeySchema:
              - AttributeName: targetId
                KeyType: HASH
              - AttributeName: targetType
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserUsageIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - DELETE
                - POST

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${env:S3_BUCKET}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Resource:
                - "arn:aws:s3:::${env:S3_BUCKET}/athena-results/*"
                - "arn:aws:s3:::${env:S3_BUCKET}/metadata/*"
                - "arn:aws:s3:::${env:S3_BUCKET}/files/*"

plugins:
  - serverless-dotenv-plugin
