service: storage-service

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:REGION}
  tags:
    User: bs-dev-user-3
  environment:
    S3_BUCKET: ${env:S3_BUCKET}
    METADATA_TABLE: ${env:METADATA_TABLE}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    ALLOWED_ORIGIN: ${env:ALLOWED_ORIGIN}
    USER_TABLE_STREAM_ARN: ${env:USER_TABLE_STREAM_ARN}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/index/FetchFileIndex
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/index/FetchFileIndexByDate
        - arn:aws:dynamodb:${env:REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/index/UserUsageIndex

functions:

  uploadFile:
    handler: src/handlers/uploadFile.handler
    events:
      - http:
          path: /upload-file
          method: post
          cors: true

  fetchFiles:
    handler: src/handlers/fetchFiles.handler
    events:
      - http:
          path: /metadata
          method: get
          cors: true

  getUserFiles:
    handler: src/handlers/getUserFiles.handler
    events:
      - http:
          path: /get-user-usage
          method: get
          cors: true

  downloadFile:
    handler: src/handlers/downloadFile.handler
    events:
      - http:
          path: /metadata/{fileKey}
          method: patch
          cors: true

  deleteFile:
    handler: src/handlers/deleteFile.handler
    events:
      - http:
          path: /{fileKey}
          method: delete
          cors: true

  updateFileMetadataNickname:
    handler: src/triggers/updateFileMetadataNickname.trigger
    events:
      - stream:
          type: dynamodb
          arn: ${env:USER_TABLE_STREAM_ARN}
          batchSize: 5
          startingPosition: LATEST

  storeFileMetadata: # Deprecated
    handler: src/handlers/storeFileMetadata.handler
    events:
      - http:
          path: /store-metadata
          method: post
          cors: true

  generatePresignedUrl: # Deprecated
    handler: src/utils/s3Utils.requestPresignedUrl
    events:
      - http:
          path: /presigned-url
          method: post
          cors: true



resources:
  Resources:
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:METADATA_TABLE}
        AttributeDefinitions:
          - AttributeName: fileKey
            AttributeType: S
          - AttributeName: targetId
            AttributeType: S
          - AttributeName: targetType
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - AttributeName: fileKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FetchFileIndex
            KeySchema:
              - AttributeName: targetId
                KeyType: HASH
              - AttributeName: targetType
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: FetchFileIndexByDate
            KeySchema:
              - AttributeName: targetId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserUsageIndex
            KeySchema:
              - AttributeName: userEmail
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES


    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:S3_BUCKET}
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - DELETE
                - POST

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${env:S3_BUCKET}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Resource:
                - "arn:aws:s3:::${env:S3_BUCKET}/athena-results/*"
                - "arn:aws:s3:::${env:S3_BUCKET}/metadata/*"
                - "arn:aws:s3:::${env:S3_BUCKET}/files/*"


useDotenv: true

plugins:
  - serverless-dotenv-plugin

package:
  exclude:
    - tests/**
