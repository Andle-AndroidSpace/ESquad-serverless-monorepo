service: streaming-service  # 서비스 이름 정의

frameworkVersion: "^3.15.0"  # 필요시 최신 버전으로 업데이트

provider:
  name: aws  # AWS 클라우드 제공자 설정
  runtime: nodejs20.x  # Node.js 런타임 버전 (업데이트 후 지원됨)
  region: ${opt:region, 'us-east-1'}  # AWS 리전 설정
  stage: ${opt:stage, 'dev'}  # 배포 스테이지 설정
  environment:
    MEETINGS_TABLE_NAME:
      Ref: Meetings  # Meetings DynamoDB 테이블 참조
    ATTENDEES_TABLE_NAME:
      Ref: Attendees  # Attendees DynamoDB 테이블 참조
    PARTICIPANT_USAGE_TABLE_NAME:
      Ref: ParticipantUsageTracking  # 참여자 사용량 추적 테이블 참조
    MEETING_ROOM_USAGE_TABLE_NAME:
      Ref: MeetingRoomUsageTracking  # 스트리밍 회의실 사용 추적 테이블 참조
    SQS_QUEUE_ARN:
      Fn::GetAtt:
        - MeetingNotificationsQueue
        - Arn  # SQS 큐의 ARN 가져오기
    BROWSER_LOG_GROUP_NAME:
      Ref: ChimeBrowserLogs  # CloudWatch 로그 그룹 참조

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "chime:CreateMeeting"
            - "chime:CreateAttendee"
            - "chime:DeleteMeeting"
          Resource: "arn:aws:chime:*:*:meeting/*"  # Chime 미팅 및 참석자 생성 권한
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
          Resource:
            - Fn::GetAtt:
                - Meetings
                - Arn  # Meetings 테이블 접근 권한
            - Fn::GetAtt:
                - Attendees
                - Arn  # Attendees 테이블 접근 권한
            - Fn::GetAtt:
                - ParticipantUsageTracking
                - Arn  # ParticipantUsageTracking 테이블 접근 권한
            - Fn::Sub: "${ParticipantUsageTracking.Arn}/index/TitleIndex"  # TitleIndex GSI 접근 권한
            - Fn::Sub: "${ParticipantUsageTracking.Arn}/index/TeamIndex"  # TeamIndex GSI 접근 권한
            - Fn::Sub: "${ParticipantUsageTracking.Arn}/index/NameIndex"  # NameIndex GSI 접근 권한
            - Fn::GetAtt:
                - MeetingRoomUsageTracking
                - Arn  # MeetingRoomUsageTracking 테이블 접근 권한
        - Effect: "Allow"
          Action:
            - "kms:Decrypt"
          Resource: "*"  # KMS 복호화 권한

custom:
  useEventBridge: ${opt:useEventBridge, 'true'}  # EventBridge 사용 여부 설정

  chimeEventBridgeEvents:
    true:
      - eventBridge:
          pattern:
            source:
              - aws.chime
            detail-type:
              - 'Chime Meeting State Change'  # Chime 미팅 상태 변경 이벤트
    false: []

functions:
  ChimeSdkJoinLambda:
    handler: src/joinMeetingHandler.handler  # 미팅 참가 핸들러
    events:
      - http:
          path: /join
          method: post
          cors:
            origin: 'https://live.dev.esquad.click'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
    environment:
      USE_EVENT_BRIDGE: ${self:custom.useEventBridge}  # EventBridge 사용 여부

  ChimeSdkEndLambda:
    handler: src/endMeetingHandler.handler  # 미팅 종료 핸들러
    events:
      - http:
          path: /end
          method: post
          cors:
            origin: 'https://live.dev.esquad.click'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  ChimeSdkAttendeeLambda:
    handler: src/attendeeMeetingHandler.handler  # 참석자 정보 핸들러
    events:
      - http:
          path: /attendee
          method: get
          cors:
            origin: 'https://live.dev.esquad.click'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  ChimeSQSQueueLambda:
    handler: src/sqsHandler.handler  # SQS 메시지 처리 핸들러
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MeetingNotificationsQueue
              - Arn  # SQS 큐의 ARN
          batchSize: 10

  ChimeEventBridgeLambda:
    handler: src/eventHandler.handler  # EventBridge 이벤트 핸들러
    events: ${self:custom.chimeEventBridgeEvents.${self:custom.useEventBridge}}  # 조건부 이벤트 바인딩

  ChimeSdkBrowserLogsLambda:
    handler: src/logHandler.handler  # 브라우저 로그 핸들러
    events:
      - http:
          path: /logs
          method: post
          cors:
            origin: 'https://live.dev.esquad.click'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

resources:
  Resources:
    Meetings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'esquad-streaming-meeting-${self:provider.stage}'  # 미팅 테이블
        AttributeDefinitions:
          - AttributeName: 'title'
            AttributeType: 'S'
          - AttributeName: 'passcode'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'title'
            KeyType: HASH  # 기본 키 설정
        BillingMode: PAY_PER_REQUEST  # 온디맨드 과금 방식
        GlobalSecondaryIndexes:
          - IndexName: 'passcode'
            KeySchema:
              - AttributeName: 'passcode'
                KeyType: HASH  # 보조 인덱스 설정
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: 'ttl'  # TTL 설정
          Enabled: true

    Attendees:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'esquad-streaming-attendee-${self:provider.stage}'  # 참석자 테이블
        AttributeDefinitions:
          - AttributeName: 'attendeeId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'attendeeId'
            KeyType: HASH  # 기본 키 설정
        BillingMode: PAY_PER_REQUEST

    ParticipantUsageTracking:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'esquad-streaming-participant-usage-${self:provider.stage}'  # 참여자 사용량 추적 테이블
        AttributeDefinitions:
          - AttributeName: 'userEmail'
            AttributeType: 'S'
          - AttributeName: 'teamId'
            AttributeType: 'S'
          - AttributeName: 'title'
            AttributeType: 'S'
          - AttributeName: 'start_At'
            AttributeType: 'S'
          - AttributeName: 'name'   # name 필드 추가
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userEmail'
            KeyType: HASH  # 파티션 키
          - AttributeName: 'start_At'
            KeyType: RANGE  # 정렬 키
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: 'TitleIndex'  # title을 기준으로 검색하기 위한 GSI 추가
            KeySchema:
              - AttributeName: 'title'
                KeyType: HASH  # GSI의 파티션 키로 title 설정
              - AttributeName: 'start_At'
                KeyType: RANGE  # GSI의 정렬 키로 start_At 설정
            Projection:
              ProjectionType: ALL  # 모든 속성을 인덱스에 포함
          - IndexName: 'TeamIndex'  # teamId를 기준으로 검색하기 위한 GSI 추가
            KeySchema:
              - AttributeName: 'teamId'
                KeyType: HASH  # GSI의 파티션 키로 teamId 설정
            Projection:
              ProjectionType: ALL  # 모든 속성을 인덱스에 포함
          - IndexName: 'NameIndex'  # name을 기준으로 검색하기 위한 GSI 추가
            KeySchema:
              - AttributeName: 'name'
                KeyType: HASH  # GSI의 파티션 키로 name 설정
              - AttributeName: 'start_At'
                KeyType: RANGE # GSI의 정렬 키로 start_At 설정
            Projection:
              ProjectionType: ALL

    MeetingRoomUsageTracking:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'esquad-streaming-meeting-room-usage-${self:provider.stage}'  # 스트리밍 회의실 사용 추적 테이블
        AttributeDefinitions:
          - AttributeName: 'title'
            AttributeType: 'S'
          - AttributeName: 'teamId'
            AttributeType: 'S'
          - AttributeName: 'status'
            AttributeType: 'S'
          - AttributeName: 'start_At'
            AttributeType: 'S'
          - AttributeName: 'userEmail'
            AttributeType: 'S'  # GSI에 사용하기 위해 추가
        KeySchema:
          - AttributeName: 'title'
            KeyType: HASH  # 파티션 키
          - AttributeName: 'start_At'
            KeyType: RANGE  # 정렬 키
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: 'StatusIndex'
            KeySchema:
              - AttributeName: 'status'
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: 'TeamIndex'
            KeySchema:
              - AttributeName: 'teamId'
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: 'UserEmailIndex'  # userEmail을 기준으로 검색하기 위한 GSI 추가
            KeySchema:
              - AttributeName: 'userEmail'
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    MeetingNotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'MeetingNotificationsQueue-${self:provider.stage}'  # 미팅 알림용 SQS 큐
        KmsMasterKeyId: 
          Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/ChimeKMS-${self:provider.stage}  # KMS 키 사용

    ChimeBrowserLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: 'ChimeBrowserLogs-${self:provider.stage}'  # 브라우저 로그 그룹

    ChimeKMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: Chime 액세스용 커스텀 KMS 키
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Sid: Allow access for Chime Service
              Effect: Allow
              Principal:
                Service:
                  - chime.amazonaws.com
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: '*'  # Chime 서비스에 키 사용 허용
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
              Action: 
                - kms:*
              Resource: '*'  # 루트 사용자에 전체 권한 부여

    ChimeKMSAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName:
          Fn::Sub: 'alias/ChimeKMS-${AWS::StackName}'  # KMS 키 별칭 생성
        TargetKeyId:
          Ref: ChimeKMSKey  # KMS 키 참조

outputs:
  ApiURL:
    Description: '${self:provider.stage} 환경의 API 엔드포인트 URL'
    Value:
      Fn::Sub: 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/'  # API Gateway URL

plugins:
  - serverless-iam-roles-per-function  # 함수별 IAM 역할 플러그인
