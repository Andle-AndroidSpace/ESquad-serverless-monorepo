service: meeting

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    MEETINGS_TABLE_NAME:
      Ref: Meetings
    ATTENDEES_TABLE_NAME:
      Ref: Attendees
    SQS_QUEUE_ARN:
      Fn::GetAtt:
        - MeetingNotificationsQueue
        - Arn
    BROWSER_LOG_GROUP_NAME:
      Ref: ChimeBrowserLogs

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "chime:CreateMeeting"
            - "chime:CreateAttendee"
          Resource: "arn:aws:chime:*:*:meeting/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:UpdateItem"
          Resource:
            - Fn::GetAtt:
                - Meetings
                - Arn
            - Fn::GetAtt:
                - Attendees
                - Arn
        - Effect: "Allow"
          Action:
            - "kms:Decrypt"
          Resource: "*"

custom:
  useEventBridge: ${opt:useEventBridge, 'false'}

  chimeEventBridgeEvents:
    true:
      - eventBridge:
          pattern:
            source:
              - aws.chime
            detail-type:
              - 'Chime Meeting State Change'
    false: []

functions:
  ChimeSdkIndexLambda:
    handler: src/index.handler
    events:
      - http:
          path: /
          method: get
      - http:
          path: /{proxy+}
          method: any

  ChimeSdkJoinLambda:
    handler: src/join.handler
    events:
      - http:
          path: /api/stream/join
          method: post
    environment:
      USE_EVENT_BRIDGE: ${self:custom.useEventBridge}

  ChimeSdkEndLambda:
    handler: src/end.handler
    events:
      - http:
          path: /api/stream/end
          method: post

  ChimeSdkAttendeeLambda:
    handler: src/attendee.handler
    events:
      - http:
          path: /api/stream/attendee
          method: get

  ChimeSQSQueueLambda:
    handler: src/sqs_handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MeetingNotificationsQueue
              - Arn
          batchSize: 10

  ChimeEventBridgeLambda:
    handler: src/event_bridge_handler.handler
    events: ${self:custom.chimeEventBridgeEvents.${self:custom.useEventBridge}}

  ChimeSdkBrowserLogsLambda:
    handler: src/logs.handler
    events:
      - http:
          path: /api/stream/logs
          method: post

resources:
  Resources:
    Meetings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'MeetingsTable'
        AttributeDefinitions:
          - AttributeName: 'Title'
            AttributeType: 'S'
          - AttributeName: 'Passcode'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'Title'
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: 'Passcode'
            KeySchema:
              - AttributeName: 'Passcode'
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: 'TTL'
          Enabled: true

    Attendees:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'AttendeesTable'
        AttributeDefinitions:
          - AttributeName: 'AttendeeId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'AttendeeId'
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MeetingNotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'MeetingNotificationsQueue'
        KmsMasterKeyId: arn:aws:kms:us-east-1:${aws:accountId}:alias/ChimeKMS

    ChimeBrowserLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: 'ChimeBrowserLogs'

    ChimeKMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: Custom KMS Key with Chime access
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Sid: Allow access for Chime Service
              Effect: Allow
              Principal:
                Service: chime.amazonaws.com
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: '*'
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
              Action: kms:*
              Resource: '*'

    ChimeKMSAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName:
          Fn::Sub: 'alias/ChimeKMS-${AWS::StackName}'
        TargetKeyId:
          Ref: ChimeKMSKey

outputs:
  ApiURL:
    Description: 'API endpoint URL for ${self:provider.stage} environment'
    Value:
      Fn::Sub: 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/'

plugins:
  - serverless-iam-roles-per-function

