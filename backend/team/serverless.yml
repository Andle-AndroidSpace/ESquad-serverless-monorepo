service: team-service

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ${env:REGION}
  environment:
    TABLE: ${env:TEAM_TABLE}  
    CLIENT_ID: ${env:CLIENT_ID}
    CLIENT_SECRET: ${env:CLIENT_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:BatchWriteItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TABLE}/index/TeamNameIndex
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TABLE}/index/SK-Index
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TABLE}/index/teamID-Index
      managedPolicies:
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'

functions:
  createTeam:
    handler: handler/team-handler.createTeam
    events:
      - http:
          path: /new
          method: post
          cors: true
  checkTeamName:
    handler: handler/steam-handler.checkTeamName
    events:
      - http:
          path: /new/{teamName}
          method: get
          cors: true    
  getAllTeamSpaces:
    handler: handler/team-handler.getAllTeamSpaces
    events:
      - http:
          path: 
          method: get
          cors: true
  getTeamProfile:
    handler: handler/team-handler.getTeamProfile
    events:
      - http:
          path: /{teamId}
          method: get
          cors: true
  updateTeam:
    handler: handler/team-handler.updateTeam
    events:
      - http:
          path: /{teamId}
          method: put
          cors: true
  deleteTeam:
    handler: handler/team-handler.deleteTeam
    events:
      - http:
          path: /{teamId}
          method: delete
          cors: true
   
resources:
  Resources:
    TeamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE}        
        AttributeDefinitions:  
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: teamName
            AttributeType: S
          - AttributeName: teamID
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TeamNameIndex
            KeySchema:
              - AttributeName: teamName
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: SK-Index
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: teamID-Index
            KeySchema:
              - AttributeName: teamID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
       
plugins:
  - serverless-dotenv-plugin

package:
  individually: true
  patterns:
    - "!package-lock.json"
    - "package.json" 
    - node_modules/uuid/**
    - node_modules/axios/**
    - "!.env"