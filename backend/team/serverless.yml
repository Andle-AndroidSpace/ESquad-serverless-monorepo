service: team-service

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ${env:REGION}
  environment:
    TEAM_TABLE: ${env:TEAM_TABLE}  
    USER_TABLE: ${env:USER_TABLE}
    CLIENT_ID: ${env:CLIENT_ID}
    CLIENT_SECRET: ${env:CLIENT_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:BatchWriteItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TEAM_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TEAM_TABLE}/index/TeamName-Index # teamName 중복 찾기
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TEAM_TABLE}/index/StudyName-Index # studyName 중복 찾기
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TEAM_TABLE}/index/SK-ItemType-Index # USER로 teamID, studyID 찾을 때 
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TEAM_TABLE}/index/PK-ItemType-Index # teamID, studyID로 USER 찾을 때

      managedPolicies:
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'

resources:
  Resources:
    TeamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TEAM_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: itemType
            AttributeType: S
          - AttributeName: teamName
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: SK-ItemType-Index
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: itemType
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - teamID
                - PK
          - IndexName: PK-ItemType-Index
            KeySchema:
              - AttributeName: PK
                KeyType: HASH
              - AttributeName: itemType
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - SK
          - IndexName: TeamName-Index
            KeySchema:
              - AttributeName: teamName
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY


functions:
  getTeams:
    handler: src/handlers/teamUserHandler.getTeams
    events:
      - http:
          path: /
          method: get
          cors: true
          # authorizer:
            # type: request
            # identitySource: method.request.header.Authorization
  createTeam:
    handler: src/handlers/teamHandler.createTeam
    events:
      - http:
          path: /
          method: post
          cors: true   
  checkTeamName:
    handler: src/handlers/teamHandler.checkTeamName
    events:
      - http:
          path: /check-name/{teamName}
          method: get
          cors: true
  
  getTeamProfile:
    handler: src/handlers/teamHandler.getTeamProfile
    events:
      - http:
          path: /{teamId}
          method: get
          cors: true
  
  checkTeamUserRole:
    handler: src/handlers/teamUserHandler.checkTeamUserRole
    events:
      - http:
          path: /{teamId}/role
          method: get
          cors: true
  getTeamUsersProfile:
    handler: src/handlers/teamUserHandler.getTeamUsersProfile
    events:
      - http:
          path: /{teamId}/user
          method: get
          cors: true
          # authorizer:
          #   type: request
          #   identitySource: method.request.header.Authorization
  updateTeam:
    handler: src/handlers/teamHandler.updateTeam
    events:
      - http:
          path: /{teamId}/settings/info
          method: put
          cors: true
  deleteTeam:
    handler: src/handlers/teamHandler.deleteTeam
    events:
      - http:
          path: /{teamId}/settings
          method: delete
          cors: true
  updateTeamUsers:
    handler: src/handlers/teamUserHandler.updateTeamUsers
    events:
      - http:
          path: /{teamId}/setting/users
          method: put
          cors: true

plugins:
  - serverless-dotenv-plugin
  # - serverless-domain-manager

package:
  individually: true
  patterns:
    - "!package-lock.json"
    - "package.json" 
    - node_modules/uuid/**
    - node_modules/axios/**
    - "!.env"