service: esquad-google-login
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ${env:REGION}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource:
            - arn:aws:dynamodb:${env:REGION}:430118855167:table/${env:DYNAMODB_USER_TABLE_NAME}

functions:
  authorizer:
    handler: service/handler.authorizer
    events:
      - http:
          path: authorize
          method: post

  saveUserToDynamoDB:
    handler: service/handler.saveUserToDynamoDB

  updateUserNickname:
    handler: service/handler.updateUserNickname
    events:
      - http:
          path: update-nickname
          method: post

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      DependsOn:
        - SaveUserToDynamoDBLambdaFunction
      Properties:
        UserPoolName: ${env:COGNITO_USER_POOL_NAME}
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: true
        LambdaConfig:
          PostConfirmation: 
            Fn::GetAtt:
              - SaveUserToDynamoDBLambdaFunction
              - Arn


    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - GoogleIdentityProvider
      Properties:
        ClientName: ${env:COGNITO_USER_POOL_CLIENT_NAME}
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - ${env:CALLBACK_URL}
        SupportedIdentityProviders:
          - Google
        GenerateSecret: false
        AllowedOAuthFlowsUserPoolClient: true

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${env:COGNITO_IDENTITY_POOL_NAME}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${env:COGNITO_DOMAIN}
        UserPoolId:
          Ref: CognitoUserPool

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_USER_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: nickname
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NicknameIndex
            KeySchema:
              - AttributeName: nickname
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    GoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        UserPoolId: 
          Ref: CognitoUserPool
        ProviderType: Google
        AttributeMapping:
          email: email
          name: name
          phone_number: phone_number
        ProviderDetails:
          client_id: ${env:COGNITO_GOOGLE_CLIENT_ID}
          client_secret: ${env:COGNITO_GOOGLE_CLIENT_SECRET}
          authorize_scopes: ${env:COGNITO_AUTHORIZE_SCOPES}

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
    UserTableName:
      Value:
        Ref: UserTable

package:
  individually: true
  include:
    - node_modules/**
    - backend/user/service/handler.js
useDotenv: true
plugins:
  - serverless-dotenv-plugin