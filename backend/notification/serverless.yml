service: service-notification
# org: persii
app: esquad-monorepo
frameworkVersion: '^3.15.0'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  environment:  # Lambda 함수에 전달되는 환경 변수 설정
    STORAGE_DYNAMODB_TABLE: ${env:METADATA_TABLE}
    TEAM_DYNAMODB_TABLE: ${env:TEAM_TABLE}
    NOTIFICATION_CONNECTIONS_DYNAMODB_TABLE: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
    NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
    NOTIFICATION_DYNAMODB_TABLE: ${env:NOTIFICATION_TABLE}
    NOTIFICATION_INDEX: ${env:NOTIFICATION_INDEX}
    SNS_STORAGE_TOPIC_PREFIX: ${env:SNS_STORAGE_TOPIC_PREFIX}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    METADATA_TABLE_STREAM_LABEL: ${env:METADATA_TABLE_STREAM_LABEL}
    ESQUAD_SNS_TOPIC_ARN: "arn:aws:sns:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${env:SNS_STORAGE_TOPIC_PREFIX}"
    SOCKET_API_GATEWAY_ID: !Ref ApiGatewayWebsocketApi
    SOCKET_API_ENDPOINT:
      Fn::Join:
        - ''
        -
          - 'wss://'
          - Ref: ApiGatewayWebsocketApi
          - .execute-api.
          - ${env:AWS_REGION}
          - .amazonaws.com/
          - ${opt:stage, 'dev'}
  # logs:
    # websocket: true # Enable WebSocket CloudWatch logging
    # restApi: true   # Enable REST API CloudWatch logging if needed
  apiGateway:   # API Gateway 관련 설정
    role: serverlessApiGatewayCloudWatchRole
#    websocketApiId: ${self:resources.ApiGatewayWebsocketApi.WebSocketApiId} # 생성된 WebSocket API의 ID (serverless에서 자동 참조)
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - sns:Publish
        - sns:Subscribe
        - sns:Unsubscribe
#        - execute-api:Invoke
      Resource:
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:TEAM_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_INDEX}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}/index/${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
#        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}/index/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TOPIC_INDEX}
        - arn:aws:sns:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${env:SNS_STORAGE_TOPIC_PREFIX}
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - "arn:aws:execute-api:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${ApiGatewayWebsocketApi}/*/@connections/*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/lambda/*
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
      maxAge: 6000 # In seconds

functions:
  notification_onConnect:
    handler: ./service/onConnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $connect   # 클라이언트가 웹소켓에 연결할 때 호출
          
  notification_get:
    handler: ./service/get.handler
    runtime: nodejs20.x
    events:
      - httpApi:
          path: /notification
          method: GET

  notification_onDisconnect:
    handler: ./service/onDisconnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $disconnect  # 클라이언트가 웹소켓에서 연결을 끊을 때 호출
  # notification_onDefault:
  #   handler: ./service/onDefault.handler
  #     - websocket:
  #         route: $default   # 라우팅되지 않은 메시지 처리

  # SNS 을 구독하는 Lambda : 모든 WebSocket 클라이언트에 SNS 메시지를 브로드캐스트
  broadcastNotification:
    handler: ./service/snsSubscribe.handler
    runtime: nodejs20.x
    environment:
      CONNECTIONS_TABLE: ${self:provider.environment.NOTIFICATION_CONNECTIONS_DYNAMODB_TABLE}
      API_GATEWAY_WEBSOCKET_ENDPOINT:
        Fn::Sub: "https://${ApiGatewayWebsocketApi}.execute-api.${env:AWS_REGION}.amazonaws.com/${opt:stage}"
    events:
      - sns:
          arn: arn:aws:sns:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${env:SNS_STORAGE_TOPIC_PREFIX}

#  markAsRead:
#    handler: ./service/markAllAsRead.handler
#    runtime: nodejs20.x
#    events:
#      - http:
#          path: notifications/mark-as-read
#          method: post
#          cors: true

  # 토픽에 메시지 전송
  pubNotificationOnFileUpload:
    handler: ./service/pubNotificationOnFileUpload.handler # Lambda 핸들러 함수
    runtime: nodejs20.x
    environment:
      TEAM_TABLE_NAME: ${env:TEAM_TABLE}
      NOTIFICATIONS_TABLE_NAME: ${env:NOTIFICATION_TABLE}
      SNS_STORAGE_TOPIC_PREFIX:
        Ref: EsquadStorageNotificationTopic
      SOCKET_API_ENDPOINT:
        Fn::Sub: "https://${ApiGatewayWebsocketApi}.execute-api.${env:AWS_REGION}.amazonaws.com/${opt:stage, 'dev'}"
    events:
      - stream:
          type: dynamodb # DynamoDB Streams 트리거
          arn: arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/stream/${env:METADATA_TABLE_STREAM_LABEL}
          batchSize: 5              # 스트림 배치 처리 크기
          startingPosition: LATEST  # 최신 이벤트부터 시작

#  sendNotifications:
#    handler: ./service/sendNotifications.sendNotificationHandler
#    events:
#      - http:
#          path: notifications/send
#          method: post
#          cors: true # 알림 전송을 위한 HTTP 엔드포인트 설정

resources:
  Resources:
    ApiGatewayWebsocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action    # 메시지 본문의 action field 를 기반으로 들어오는 Websocket 메시지를 라우팅하는데 역할

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
            KeySchema:
              - AttributeName: userId   # 특정 사용자(userId)에 대한 모든 WebSocket 연결을 쿼리
                KeyType: HASH
            Projection:
              ProjectionType: ALL
#          - IndexName: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_TOPIC_INDEX}
#            KeySchema:
#              - AttributeName: topic    # SNS 주제를 기반으로 연결을 효율적으로 조회
#                KeyType: HASH
#            Projection:
#            ProjectionType: ALL
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
        BillingMode: PAY_PER_REQUEST
        SSESpecification: # 암호화 활성화
          SSEEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: isRead
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH # Partition Key for GSI
              - AttributeName: isRead
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # Include all attributes in the GSI
        BillingMode: PAY_PER_REQUEST

    EsquadStorageNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_STORAGE_TOPIC_PREFIX}   # SNS Topic 명

    ApiGatewayCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverlessApiGatewayCloudWatchRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ApiGatewayCloudWatchPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/apigateway/*"

  Outputs:
#    WebSocketApiEndpoint:
#      Description: WebSocket API Gateway Base URL
#      Value:
#        Fn::Sub: "wss://${ApiGatewayWebsocketApi}.execute-api.${env:AWS_REGION}.amazonaws.com/${opt:stage}"
    NotificationTableName:
      Description: Name of the DynamoDB table for notifications
      Value: ${env:NOTIFICATION_TABLE}
    ConnectionsTableName:
      Description: Name of the DynamoDB table for WebSocket connections
      Value:
        Ref: ConnectionsTable
    NotificationTopicArn:
      Description: ARN of the SNS Topic
      Value:
        Ref: EsquadStorageNotificationTopic

useDotenv: true