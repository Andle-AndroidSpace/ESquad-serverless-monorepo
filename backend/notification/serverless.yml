service: notification-service
org: persii
app: esquad-monorepo
frameworkVersion: "^3.15.0"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  environment:
    STAGE: ${opt:stage, 'dev'}
    USER_POOL_ID: ${env:USER_POOL_ID}
    COGNITO_IDP: ${env:COGNITO_IDP}
    WEBSOCKET_ENDPOINT: ws.noti.api.esquad.click/${opt:stage, 'dev'}
    STORAGE_DYNAMODB_TABLE: ${env:METADATA_TABLE}
    TEAM_DYNAMODB_TABLE: ${env:TEAM_TABLE}
    NOTIFICATION_CONNECTIONS_DYNAMODB_TABLE: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
    NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
    NOTIFICATION_DYNAMODB_TABLE: ${env:NOTIFICATION_TABLE}
    NOTIFICATION_CREATED_INDEX: ${env:NOTIFICATION_CREATED_INDEX}
    NOTIFICATION_READ_INDEX: ${env:NOTIFICATION_READ_INDEX}
    NOTIFICATION_SAVE_INDEX: ${env:NOTIFICATION_SAVE_INDEX}
    NOTIFICATION_TABLE_STREAM_LABEL: ${env:NOTIFICATION_TABLE_STREAM_LABEL}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    METADATA_TABLE_STREAM_LABEL: ${env:METADATA_TABLE_STREAM_LABEL}
  apiGateway:
    role: serverlessApiGatewayCloudWatchRole
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - execute-api:Invoke
      Resource:
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:TEAM_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_CREATED_INDEX}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_READ_INDEX}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_SAVE_INDEX}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}/index/${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
        - arn:aws:sns:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${env:SNS_STORAGE_TOPIC_PREFIX}
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - "arn:aws:execute-api:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${ApiGatewayWebsocketApi}/*/@connections/*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/lambda/*

functions:
  preflightHandler:
    handler: service/preflight.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: OPTIONS

  onConnect:
    handler: service/onConnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $connect

  get_count:
    handler: service/count.handler
    events:
      - websocket:
          route: countUnReadNotifications

  fetch_all:
    handler: service/fetch.handler
    events:
      - http:
          path: notification/all
          method: post
          cors: true

  send_notifications:
    handler: service/sendNotifications.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - NotificationsTable
              - StreamArn
          batchSize: 5
          startingPosition: LATEST
          filterPatterns:
            - { "eventName": ["INSERT"] }

  mark_all_as_read:
    handler: ./service/markAllAsRead.handler
    events:
      - http:
          path: notification/mark
          method: post
          cors: true

  mark_as_save:
    handler: ./service/markAsSave.handler
    events:
      - http:
          path: notification/save
          method: get
          cors: true

  mark_as_release:
    handler: ./service/markAsRelease.handler
    events:
      - http:
          path: notification/release-save
          method: get
          cors: true

  filter_saved_notifications:
    handler: ./service/filterSaved.handler
    events:
      - http:
          path: notification/filter-saved
          method: post
          cors: true

  notification_onDisconnect:
    handler: service/onDisconnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $disconnect # 클라이언트가 웹소켓에서 연결을 끊을 때 호출

  publish_notification_on_file_upload:
    handler: service/publishNotificationOnFileUpload.handler # Lambda 핸들러 함수
    events:
      - stream: # DynamoDB Streams 트리거
          type: dynamodb
          arn: arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}/stream/${env:METADATA_TABLE_STREAM_LABEL}
          batchSize: 5 # 스트림 배치 처리 크기
          startingPosition: LATEST # 최신 이벤트부터 시작

resources:
  Resources:
    ApiGatewayWebsocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action # 메시지 본문의 action field 를 기반으로 들어오는 Websocket 메시지를 라우팅하는데 역할

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${env:NOTIFICATION_WEBSOCKET_CONNECTION_USER_INDEX}
            KeySchema:
              - AttributeName: userId # 특정 사용자(userId)에 대한 모든 WebSocket 연결을 쿼리
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: isRead
            AttributeType: N
          - AttributeName: isSave
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${env:NOTIFICATION_CREATED_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # 모든 속성을 포함하여 인덱스에서 조회하는 설정
          - IndexName: ${env:NOTIFICATION_READ_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: isRead
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${env:NOTIFICATION_SAVE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: isSave
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ApiGatewayCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverlessApiGatewayCloudWatchRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ApiGatewayCloudWatchPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/apigateway/*"

useDotenv: true
