useDotenv: true   # .env 파일을 사용하여 환경 변수 설정

service: notification-service
org: persii
#app: esquad-monorepo
frameworkVersion: "^3.15.0"

provider:
  name: aws
  runtime: nodejs20.x
  STAGE: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  stackName: ${self:service}-${self:provider.stage}
  environment:
    STAGE: ${opt:stage, 'dev'}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    ALLOWED_ORIGIN: ${env:ALLOWED_ORIGIN}
    WEBSOCKET_RESOURCE_ID: !Ref ApiGatewayWebsocketApi

    TEAM_TABLE: ${env:TEAM_TABLE}
    FILE_METADATA_TABLE: ${env:FILE_METADATA_TABLE}
    NOTIFICATION_TABLE: ${env:NOTIFICATION_TABLE}
    NOTIFICATION_CONNECTION_TABLE: ${env:NOTIFICATION_CONNECTION_TABLE}
    NOTIFICATION_CONNECTION_USER_INDEX: userId-index
    NOTIFICATION_CREATED_INDEX: user-created-index
    NOTIFICATION_READ_INDEX: user-read-index
    NOTIFICATION_SAVE_INDEX: user-save-index

    TEAM_TABLE_ARN: ${cf:TeamStackName.TeamTableArn}
    METADATA_TABLE_ARN: ${env:METADATA_TABLE_ARN}
    NOTIFICATION_TABLE_ARN:
      Ref: NotificationsTable

  # one IAM Role is shared by all the Lambda functions in my service
  # Also by default, my Lambda functions have permission to create and write to CloudWatch logs
  # 서비스의 모든 Lambda 함수에서 공유
  iam:
    role:
      name: esquad-user-01-${opt:stage}-role
      assumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com # Allow API Gateway to assume the role
            Action: sts:AssumeRole
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: ${cf:AnotherStackName.TeamTableArn}
        - Effect: Allow
          Action:
            - execute-api:ManageConnections   # WebSocket 연결 관리 권한
            - execute-api:Invoke
          Resource:
            - !Sub "arn:aws:execute-api:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:*/${opt:stage}/*/@connections/*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:TEAM_TABLE}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:METADATA_TABLE}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_CREATED_INDEX}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_READ_INDEX}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_TABLE}/index/${env:NOTIFICATION_SAVE_INDEX}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_CONNECTION_TABLE}
            - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:NOTIFICATION_CONNECTION_TABLE}/index/${env:NOTIFICATION_CONNECTION_USER_INDEX}
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/lambda/*
            - arn:aws:logs:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:log-group:/aws/apigateway/*

functions:
  preflightHandler:
    handler: service/preflight.handler
    events:
      - http:
          path: /{proxy+}
          method: OPTIONS
          cors: true

  onConnect:
    handler: service/onConnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $connect

  get_count:
    handler: service/count.handler
    events:
      - websocket:
          route: countUnReadNotifications

  fetch_all:
    handler: service/fetch.handler
    events:
      - http:
          path: /all
          method: post
          cors: true

  send_notification:
    handler: service/sendNotification.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - NotificationsTable
              - StreamArn
          batchSize: 5
          startingPosition: LATEST
          filterPatterns:
            - { "eventName": ["INSERT"] }

  mark_all_as_read:
    handler: ./service/markAllAsRead.handler
    events:
      - http:
          path: /mark
          method: post
          cors: true

  mark_as_save:
    handler: ./service/markAsSave.handler
    events:
      - http:
          path: /save
          method: put
          cors: true

  mark_as_release:
    handler: ./service/markAsRelease.handler
    events:
      - http:
          path: /release-save
          method: put
          cors: true

  filter_saved_notifications:
    handler: ./service/filterSaved.handler
    events:
      - http:
          path: /filter-saved
          method: post
          cors: true

  notification_onDisconnect:
    handler: service/onDisconnect.handler
    runtime: nodejs20.x
    events:
      - websocket:
          route: $disconnect # 클라이언트가 웹소켓에서 연결을 끊을 때 호출

  publish_notification_on_file_upload:
    handler: service/publishNotificationOnFileUpload.handler
    events:
      - stream: # DynamoDB Streams 트리거
          type: dynamodb
          arn: ${env:METADATA_TABLE_ARN}
          batchSize: 5 # 스트림 배치 처리 크기
          startingPosition: LATEST # 최신 이벤트부터 시작

  publish_notification_on_team_created:
    handler: service/publishNotificationOnTeamCreated.handler
    events:
      - stream: # DynamoDB Streams 트리거
          type: dynamodb
          arn: ${env:TEAM_TABLE_ARN}
          batchSize: 5 # 스트림 배치 처리 크기
          startingPosition: LATEST # 최신 이벤트부터 시작

resources:
  Resources:
    ApiGatewayWebsocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action # 메시지 본문의 action field 를 기반으로 들어오는 Websocket 메시지를 라우팅하는데 역할
        DisableExecuteApiEndpoint: true                 # Disable default endpoint

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_CONNECTION_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${env:NOTIFICATION_CONNECTION_USER_INDEX}
            KeySchema:
              - AttributeName: userId # 특정 사용자(userId)에 대한 모든 WebSocket 연결을 쿼리
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:NOTIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: isRead
            AttributeType: N
          - AttributeName: isSave
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${env:NOTIFICATION_CREATED_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # 모든 속성을 포함하여 인덱스에서 조회하는 설정
          - IndexName: ${env:NOTIFICATION_READ_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: isRead
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${env:NOTIFICATION_SAVE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: isSave
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE



